name: Deploy EC2 Instance

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Which environment to deploy (staging or prod)'
        required: true
        default: 'staging'


jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      STACK_NAME: ec2-deployment-stack-${{ github.event.inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Validate CloudFormation Template
        run: |
          aws cloudformation validate-template --template-body file://cloudformation/ec2-instance.yaml

      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --template-file cloudformation/ec2-instance.yaml \
            --stack-name $STACK_NAME \
            --parameter-overrides \
                InstanceType=t2.large \
                KeyName=infratest \
                VpcId=${{ secrets.VPC_ID }} \
                SubnetId=${{ secrets.SUBNET_ID }} \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Retrieve EC2 Instance ID
        id: get_instance_id
        run: |
          INSTANCE_ID=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='InstanceId'].OutputValue" \
            --output text)
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "::set-output name=public_ip::$PUBLIC_IP"

      - name: Set up SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > ssh_key
          chmod 600 ssh_key
          echo ${{ env.PUBLIC_IP }}
    
      - name: Install Docker via SSH
        env:
          HOST: ${{ env.PUBLIC_IP }}
          USERNAME: ubuntu
        run: |
          ssh -i ssh_key -o StrictHostKeyChecking=no $USERNAME@$HOST '
            sudo apt-get update &&
            sudo apt-get install -y ca-certificates curl &&
            sudo install -m 0755 -d /etc/apt/keyrings &&
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc &&
            sudo chmod a+r /etc/apt/keyrings/docker.asc &&
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
              $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null &&
            sudo apt-get update &&
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin
            ' 
